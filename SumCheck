from sympy.parsing.sympy_parser import parse_expr
from sympy import symbols, Poly
import itertools
from sympy.polys.domains import GF

def booleanos(n):
  valores_booleanos = list(itertools.product([True, False], repeat=n))
  valores_enteros = [[int(b) for b in valores] for valores in valores_booleanos]
  return valores_enteros 

def evalbooleana(polinomio):
    variables = polinomio.gens#Obtener las variables del polinomio
    variables_evaluacion = variables[1:]# Obtener las variables a evaluar
    polinomios_evaluacion = []# Crear una lista vacía para almacenar los polinomios resultantes
    valores_booleanos=booleanos(len(variables_evaluacion))
    for valores in valores_booleanos:
        diccionario_valores = dict(zip(variables_evaluacion, valores))# Crear un diccionario con los valores de las variables
        polinomio_evaluado = polinomio.subs(diccionario_valores)# Evaluar el polinomio en el diccionario de valores
        polinomios_evaluacion.append(polinomio_evaluado)# Agregar el polinomio resultante a la lista de polinomios
    # Sumar todos los polinomios resultantes
    polinomio_resultante = sum(polinomios_evaluacion)
    # Devolver el polinomio resultante
    return polinomio_resultante
# Pedir al usuario que ingrese el número de variables
v = int(input("Ingrese el número de variables: "))
#r = int(input("Elija el campo en el que quiere trabajar: "))
# Definir variables simbólicas
variables = symbols(' '.join([f'x{i}' for i in range(1, v+1)]))
# Pedir al usuario que ingrese el polinomio
polinomio = input("Ingrese el polinomio: ")
# Convertir polinomio a objeto SymPy
expr = parse_expr(polinomio)
# Definir polinomio
p = Poly(expr, variables)
#print(p)
# Construir los valores booleanos
valores_enteros = booleanos(v)
#print(valores_enteros)
# Evaluar polinomio en el punto
H = 0 
for x in valores_enteros:
  H = H + p.eval(x)

print('H =', H)  # Imprime el resultado de evaluar el polinomio en el punto

g = evalbooleana(p)
print('g =',g)

ans = input("¿El valor es correcto? (y/n)")
k = 0
h = p
while ans == 'y' and k < v-1:  
  q = input("Ingrese el valor el que desea evaluar la variable: ") 
  h = h.subs(variables[k],q)
  #print(h)
  hbool = booleanos(v-1-k)
  H = 0
  for x in hbool:
    H = H + h.eval(x)
  print('H =', H)
  g = evalbooleana(h)
  print('g =',g)
  k = k+1
  ans = input("¿El valor es correcto? (y/n)")
if ans == 'y':
  print('Todo en orden')
else:
  print('Hay un error')
